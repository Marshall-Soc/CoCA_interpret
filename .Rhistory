pacman::p_load(text2map, readtext, corrplot,
googlesheets4, dplyr, textclean, RColorBrewer,
tm, qdapDictionaries, igraph, qgraph,
stringr, tidyr, tidytext, lavaan, Hmisc,
tm, nnet, entity, gmodels, rstatix, ggraph,
effects, reshape2, margins, ggcorrplot,
ggpubr, lsmeans, install = TRUE)
devtools::install_github("trinker/entity")
library(entity)
# Juxtaposition pairs
dims <- readxl::read_excel("data/semantic_directions.xlsx",
sheet = "cd")
# Bad names
bad.names <- readxl::read_excel("data/ner_cleaning.xlsx",
sheet = "bad")
# To replace names
cb <- readxl::read_excel("data/ner_cleaning.xlsx",
sheet = "cb")
# Blogs
# blog.data <- readtext("https://uclspp.github.io/datasets/data/poliblogs2008.zip")
blog.data   <- readRDS("data/blog_data.rds") # This contains all of the variables
View(blog.data)
temp <- blog.data[,c("article_id","doc_id","text","documents","docname","rating","day","blog","n_ppl_article","all_name","mccain","obama","biden","palin","clinton","bush","date")]
View(temp)
temp <- blog.data[,c("article_id","doc_id","text","documents","docname","rating","day","blog","n_ppl_article","all_name","mccain","obama","biden","palin","clinton","bush","date","documents_cleaned")]
saveRDS(temp, "data/blog_data.rds")
blog.data <- temp
rm(temp)
# Prep DTM
blog.dtm <- blog.data %>%
group_by(article_id) %>%
summarize(documents_cleaned = first(documents_cleaned),
text = first(text) ) %>%
unnest_tokens(word, documents_cleaned, to_lower = TRUE) %>%
anti_join(get_stopwords(language="en", source="snowball") ) %>%
filter(!str_detect(word, "[0-9]+") &
str_length(word) > 1 ) %>%
dplyr::count(text, word) %>%
cast_dtm(term = word, document = text,
value = n, weighting = tm::weightTf)
# Prep DTM
blog.dtm <- blog.data %>%
group_by(article_id) %>%
summarize(documents_cleaned = first(documents_cleaned),
text = first(text) ) %>%
unnest_tokens(word, documents_cleaned, to_lower = TRUE) %>%
anti_join(get_stopwords(language="en", source="snowball") ) %>%
filter(!str_detect(word, "[0-9]+") &
str_length(word) > 1 ) %>%
dplyr::count(text, word) %>%
cast_dtm(term = word, document = text,
value = n, weighting = tm::weightTf)
blog.dtm <- blog.data %>%
group_by(article_id) %>%
summarize(documents_cleaned = first(documents_cleaned),
text = first(text) ) %>%
unnest_tokens(word, documents_cleaned, to_lower = TRUE) %>%
anti_join(get_stopwords(language="en", source="snowball") ) %>%
filter(!str_detect(word, "[0-9]+") &
str_length(word) > 1 ) %>%
dplyr::count(text, word) %>%
cast_dtm(term = word, document = text,
value = n, weighting = tm::weightTf)
blog.dtm <- blog.data %>%
group_by(article_id)
blog.data %>%
group_by(article_id) %>%
summarize(documents_cleaned = first(documents_cleaned),
text = first(text) )
library(dplyr)
blog.data %>%
group_by(article_id) %>%
summarize(documents_cleaned = first(documents_cleaned),
text = first(text) )
?summarize
blog.data %>%
group_by(article_id) %>%
dplyr::summarize(documents_cleaned = first(documents_cleaned),
text = first(text) )
# Prep DTM
blog.dtm <- blog.data %>%
group_by(article_id) %>%
dplyr::summarize(documents_cleaned = first(documents_cleaned),
text = first(text) ) %>%
unnest_tokens(word, documents_cleaned, to_lower = TRUE) %>%
anti_join(get_stopwords(language="en", source="snowball") ) %>%
filter(!str_detect(word, "[0-9]+") &
str_length(word) > 1 ) %>%
dplyr::count(text, word) %>%
cast_dtm(term = word, document = text,
value = n, weighting = tm::weightTf)
dim(blog.dtm) # 13246 by 67432
# dim(removeSparseTerms(blog.dtm, .998)) # 13246  10027
blog.dtm <- removeSparseTerms(blog.dtm, .998)  # 13246  10027
dim.list <- c("racial", "gender", "morality", "status", "age")
# initialize mat for multiple sem directions
sem.direct <- matrix(ncol = ncol(ft.wv) )
# Embeddings
ft.wv <- readRDS("data/ft.cc.en.300D.2M.Rds")
m
# initialize mat for multiple sem directions
sem.direct <- matrix(ncol = ncol(ft.wv) )
for(i in dim.list){
sd.temp <- dims %>%
filter(dimension==i &
in_embeddings==TRUE) %>%
select(add, subtract) %>%
get_direction(., ft.wv)
sem.direct <- rbind(sem.direct, sd.temp)
# nrow(sem.direct)
print(i)
}
# remove first row NAs
sem.direct <- sem.direct[-1, , drop = FALSE]
dim(sem.direct) # 20 by 300
View(sem.direct)
classes <- CoCA(dtm = blog.dtm,
wv = ft.wv,
directions = sem.direct,
filter_value = 0.05,
filter_sig = T,
zero_action = "drop")
classes
classes2 <- graph.adjacency(classes$cormat,
mode="undirected", weighted=T) %>%
leading.eigenvector.community(., steps = 1) #
table(classes2$membership)
classes3 <- graph.adjacency(classes$cormat,
mode="undirected", weighted=T) %>%
leading.eigenvector.community(., steps = 2) #
table(classes3$membership)
classes4 <- graph.adjacency(classes$cormat,
mode="undirected", weighted=T) %>%
leading.eigenvector.community(., steps = 5) #
table(classes4$membership)
classes5 <- graph.adjacency(classes$cormat,
mode="undirected", weighted=T) %>%
leading.eigenvector.community(., steps = 6) #
table(classes5$membership)
cca.group2 <- classes2$membership %>% as.data.frame()
colnames(cca.group2) <- "group2"
cca.group2$rowid <- 1:nrow(cca.group2) %>% as.character()
cca.group3 <- classes3$membership %>% as.data.frame()
colnames(cca.group3) <- "group3"
cca.group3$rowid <- 1:nrow(cca.group3)
cca.group3$rowid <- 1:nrow(cca.group3) %>% as.character()
cca.group4 <- classes4$membership %>% as.data.frame()
colnames(cca.group4) <- "group4"
cca.group4$rowid <- 1:nrow(cca.group4)
cca.group4$rowid <- 1:nrow(cca.group4) %>% as.character()
blog.data <- left_join(blog.data, cca.group2, by = "rowid")
cca.group2 <- classes2$membership %>% as.data.frame()
colnames(cca.group2) <- "group2"
cca.group2$rowid <- 1:nrow(cca.group2) %>% as.character()
cca.group3 <- classes3$membership %>% as.data.frame()
colnames(cca.group3) <- "group3"
cca.group3$rowid <- 1:nrow(cca.group3)
cca.group3$rowid <- 1:nrow(cca.group3) %>% as.character()
cca.group4 <- classes4$membership %>% as.data.frame()
colnames(cca.group4) <- "group4"
cca.group4$rowid <- 1:nrow(cca.group4)
cca.group4$rowid <- 1:nrow(cca.group4) %>% as.character()
blog.data <- left_join(blog.data, cca.group2, by = "rowid")
View(cca.group4)
cor(blog.data$article_id, blog.data$text)
cor(as.numeric(blog.data$article_id), as.numeric(blog.data$text))
blog.data <- left_join(blog.data, cca.group2, by = c("article_id" = "rowid"))
blog.data <- left_join(blog.data, cca.group3, by = c("article_id" = "rowid"))
blog.data <- left_join(blog.data, cca.group4, by = c("article_id" = "rowid"))
table(classes5$membership, classes$membership)
View(blog.data)
classes$modules[[1]]$cmds
cmds <- rbind(classes$modules[[1]]$cmds,
classes$modules[[2]]$cmds,
classes$modules[[3]]$cmds,
classes$modules[[4]]$cmds,
classes$modules[[5]]$cmds)
View(cmds)
cmds <- rbind(classes$modules[[1]]$cmds,
classes$modules[[2]]$cmds,
classes$modules[[3]]$cmds,
classes$modules[[4]]$cmds,
classes$modules[[5]]$cmds) %>%
add_rownames(var = "article_id")
cmds <- rbind(classes$modules[[1]]$cmds,
classes$modules[[2]]$cmds,
classes$modules[[3]]$cmds,
classes$modules[[4]]$cmds,
classes$modules[[5]]$cmds) %>%
add_rownames(var = "article_id")
View(cmds)
blog.data <- left_join(blog.data, cmds, by = "article_id")
View(blog.data)
model <- 'dim =~ white_pole + man_pole + good_pole + influential_pole + young_pole'
fit1 <- cfa(model, data = blog.data, group = "group")
cca.group <- classes$membership %>% as.data.frame()
cca.group$rowid <- rownames(cca.group) # Get groups and their row IDs
colnames(cca.group) <- c("group","rowid")
blog.data$rowid <- rownames(blog.data) #Convert row IDs to a variable
blog.data <- left_join(blog.data, cca.group, by = c("article_id" = "rowid"))
fit1 <- cfa(model, data = blog.data, group = "group")
fit2 <- cfa(model, data = blog.data, group = "group", group.equal = c("intercepts","loadings"))
lavTestLRT(fit1, fit2)
write.csv(blog.data, "data/blog_data_sem.csv")
summary(fit1)
summary(fit1, standardized = T)
model <- 'white_pole + man_pole + good_pole + influential_pole + young_pole'
fit1 <- cfa(model, data = blog.data, group = "group")
fit1 <- cfa(model, data = blog.data, group = "group", group.equal = c("loadings"))
fit1 <- cfa(model, data = blog.data, group = "group", group.equal = c("loadings"))
model <- 'dim =~ white_pole + man_pole + good_pole + influential_pole + young_pole'
fit1 <- cfa(model, data = blog.data, group = "group", group.equal = c("loadings"))
summary(fit1)
fit1 <- cfa(model, data = blog.data, group = "group")
lavTestLRT(fit1, fit2)
vars <- c("white_pole","man_pole","good_pole","influential_pole","young_pole")
fit1 <- lavCor(blog.data[vars], output = "fit")
summary(fit1)
fit1 <- lavCor(blog.data[vars], output = "fit", group = "group")
vars <- c("white_pole","man_pole","good_pole","influential_pole","young_pole","group")
fit1 <- lavCor(blog.data[vars], output = "fit", group = "group")
summary(fit1)
summary(fit1)
lavTestLRT(fit1, fit2)
fit2
fit2 <- lavCor(blog.data[vars], output = "fit", group = "group", group.equal = c("intercepts"))
summary(fit2)
summary(fit1)
summary(fit2)
summary(fit1)
summary(fit2)
model
fit1.2 <- lavaan(model, data = blog.data, group = "group")
model
fit1.2 <- lavaan(model, data = blog.data,
auto.var=TRUE, auto.fix.first=TRUE,
auto.cov.lv.x=TRUE)
summary(fit1.2)
fit1.2 <- lavaan(model, data = blog.data,
auto.var=TRUE, auto.fix.first=TRUE,
auto.cov.lv.x=TRUE, group = "group")
summary(fit1.2)
fit2 <- lavCor(blog.data[vars], output = "fit", group = "group", model.type = "restricted")
summary(fit2)
summary(fit1)
fit1.2 <- sem(model, data = blog.data)
summary(fit1.2)
fit1.2 <- sem(model, data = blog.data, group = "group")
summary(fit1.2)
fit1 <- lavCor(blog.data[vars], output = "fit", group = "group")
summary(fit1)
fit1$
View(fit1)
model <- 'dim =~ white_pole + man_pole + good_pole + influential_pole + young_pole
white_pole ~~ man_pole
white_pole ~~ good_pole
white_pole ~~ influential_pole
white_pole ~~ young_pole
man_pole ~~ good_pole
man_pole ~~ influential_pole
man_pole ~~ young_pole
good_pole ~~ influential_pole
good_pole ~~ young_pole
influential_pole ~~ young_pole'
fit1.2 <- sem(model, data = blog.data, group = "group")
summary(fit1.2)
fit1.2 <- sem(model, data = blog.data, group = "group")
summary(fit1.2, standardized = T)
summary(fit1.2, standardized = F)
summary(fit1)
model <- '1 =~ white_pole + man_pole + good_pole + influential_pole + young_pole'
fit1.2 <- sem(model, data = blog.data, group = "group")
model <- 'dim =~ white_pole + man_pole + good_pole + influential_pole + young_pole'
fit1.2 <- sem(model, data = blog.data, group = "group")
summary(fit1.2, standardized = T)
?sem()
summary(fit1.2, standardized = T, fit.measures = T)
summary(fit1, fit.measures = T)
?lavCor()
fit1 <- lavCor(blog.data[vars], output = "fit", group = "group", test = "fixed.x")
summary(fit1, fit.measures = T)
summary(fit1
fit1 <- lavCor(blog.data[vars], output = "fit", group = "group")
summary(fit1)
BIC(fit1)
